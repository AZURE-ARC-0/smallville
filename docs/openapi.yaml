openapi: 3.0.1
info:
  title: Smallville
  version: 1.0.0
  description:  |
    Welcome to the Smallville http server! 
    
    ## Limits
    OpenAPI limits up to 3 requests/minute for free account and 60 requests/minute
    if the account is paid. Smallville was designed to be used by paid accounts not on trial. 
    
    ## Getting Started
    Download the javascript adapter or use these endpoints directly.

paths:
  /state:
    get:
      summary: Get the state of the simulation
      operationId: getState
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentStateResponse'
                    description: List of agent states
                  location_states:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationStateResponse'
                    description: List of location states
                required:
                  - agents
                  - location_states
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - State
  /memories:
    post:
      summary: Creates a new memory for an agent
      tags:
        - Memories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemoryRequest'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the memory was created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /locations:
    get:
      summary: Retrieve changed locations
      responses:
        200:
          description: A list of changed locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationStateResponse'
      tags:
        - Locations
    post:
      summary: Creates a new location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationRequest'
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Locations
  /agents:
    post:
      summary: Create a new agent
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgentRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
    get:
      summary: Get all agents
      tags:
        - Agents
      description: Returns a list of all agents with their state.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentStateResponse'
  
  /agents/{name}:
    get:
      summary: Get an agent's state
      tags:
        - Agents
      description: Returns the state of the agent with the specified name.
      parameters:
        - in: path
          name: name
          required: true
          description: The name of the agent to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStateResponse'
  /agents/{name}/ask:
    post:
      summary: Ask a question to an agent
      description: Returns an answer to a question for a specific agent.
      tags:
        - Agents
      parameters:
        - name: name
          in: path
          description: The name of the agent to ask a question to
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskQuestionRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskQuestionResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
components:
  schemas:
    CreateLocationRequest:
      type: object
      required:
        - name
        - parent
      properties:
        name:
          type: string
          description: The name of the location to be created
          example: Chair
        parent:
          type: string
          description: The name of the parent location
          example: Red House
        state:
          type: string
          description: The current state of the object. Note this is only for leaf locations and will disable this location from being a parent.
          example: occupied
        
    CreateMemoryRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the agent to add the memory to
          example: "Agent Name"
        description:
          type: string
          description: The description of the memory
          example: "Saw Eddy walking around the Red House"
        reactable:
          type: boolean
          description: Whether or not the agent will try to react to this memory
    AgentStateResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the agent
        action:
          type: string
          description: The current action of the agent
        location:
          type: string
          description: The current location of the agent
        emoji:
          type: string
          description: The emoji representing the agent
      required:
        - name
        - action
        - location
        - emoji
    LocationStateResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the location
        state:
          type: string
          description: The current state of the location
      required:
        - name
        - state
    Error:
      type: object
      properties:
        error:
          type: string
          description: A human-readable error message
      required:
        - error
    CreateAgentRequest:
      type: object
      required:
        - name
        - memories
        - activity
        - location
      properties:
        name:
          type: string
          description: The name of the agent to be created
          example: Agent Smith
        memories:
          type: array
          description: The initial characteristics of the agent. Will help determine agent's behavior
          items:
            type: string
            example: "Is a nice person who likes to drink coffee"
          minItems: 0
        activity:
          type: string
          description: The current activity of the agent
          example: "Sitting down"
        location:
          type: string
          description: The current location tree of the agent
          example: "Red House: Chair"
    AskQuestionRequest:
      type: object
      required:
        - question
      properties:
        question:
          type: string
          description: The question to ask the agent.
          example: What is your favorite color?

    AskQuestionResponse:
      type: object
      required:
        - answer
      properties:
        answer:
          type: string
          description: The answer to the question.
          example: My favorite color is blue.

  responses:
    BadRequestResponse:
      description: The request is invalid or malformed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'